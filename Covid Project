Table of content 

-- A. Table creation and data imports
-- 1. Deaths and Infections
-- 1.1. Total deaths as a % of the total cases - Global
-- 1.2. Total cases as a % of the population - Global
-- 1.3. Country infection rate as a % of its population size
-- 1.4. Country death count as a % of the population size
-- 1.5 Ranked country death count - Global ranking
-- 1.6 Ranked country death count - Continental ranking
-- 1.7 Continental death count (Ranked by region)
-- 1.8 Global new deaths to new cases as a %
-- 1.9 Africa new deaths to new cases as a %


-- 2. Vaccinations


-- Queries start here ------------------------------------------

-- Section A: Table creation and data imports
-- coviddeaths table

CREATE TABLE coviddeaths 
(iso_code VARCHAR, continent VARCHAR, location VARCHAR, date DATE,
population DOUBLE PRECISION, total_cases DOUBLE PRECISION, 
new_cases DOUBLE PRECISION, new_cases_smoothed DOUBLE PRECISION,
total_deaths DOUBLE PRECISION, new_deaths DOUBLE PRECISION,
new_deaths_smoothed DOUBLE PRECISION, total_cases_per_million DOUBLE PRECISION,
new_cases_per_million DOUBLE PRECISION,	
new_cases_smoothed_per_million DOUBLE PRECISION,	
total_deaths_per_million DOUBLE PRECISION,	
new_deaths_per_million DOUBLE PRECISION,	
new_deaths_smoothed_per_million DOUBLE PRECISION,	
reproduction_rate DOUBLE PRECISION,	
icu_patients DOUBLE PRECISION,	icu_patients_per_million DOUBLE PRECISION,
hosp_patients DOUBLE PRECISION,	hosp_patients_per_million DOUBLE PRECISION,
weekly_icu_admissions DOUBLE PRECISION,	
weekly_icu_admissions_per_million DOUBLE PRECISION,	
weekly_hosp_admissions DOUBLE PRECISION, 
weekly_hosp_admissions_per_million DOUBLE PRECISION
)

COPY coviddeaths FROM 'C:\Users\Stanford\Documents\Personal\Coding\Postgresql\Portfolio\CovidDeaths.csv' DELIMITER ';' CSV HEADER;

-- covidvaccinations table

CREATE TABLE covidvaccinations (
	iso_code VARCHAR, continent VARCHAR, location VARCHAR, date DATE, 
	new_tests DOUBLE PRECISION, total_tests DOUBLE PRECISION, 
	total_tests_per_thousand DOUBLE PRECISION, new_tests_per_thousand DOUBLE PRECISION,
	new_tests_smoothed DOUBLE PRECISION, new_tests_smoothed_per_thousand  DOUBLE PRECISION,
	positive_rate  DOUBLE PRECISION, tests_per_case DOUBLE PRECISION,tests_units VARCHAR, 
	total_vaccinations DOUBLE PRECISION, people_vaccinated DOUBLE PRECISION,
	people_fully_vaccinated DOUBLE PRECISION,new_vaccinations DOUBLE PRECISION,	
	new_vaccinations_smoothed DOUBLE PRECISION,total_vaccinations_per_hundred DOUBLE PRECISION, 
	people_vaccinated_per_hundred DOUBLE PRECISION, people_fully_vaccinated_per_hundred DOUBLE PRECISION, 
	new_vaccinations_smoothed_per_million DOUBLE PRECISION,	stringency_index DOUBLE PRECISION,
	population_density DOUBLE PRECISION, median_age  DOUBLE PRECISION, aged_65_older DOUBLE PRECISION, 
	aged_70_older  DOUBLE PRECISION, gdp_per_capita DOUBLE PRECISION, extreme_poverty DOUBLE PRECISION, 
	cardiovasc_death_rate DOUBLE PRECISION, diabetes_prevalence DOUBLE PRECISION, female_smokers DOUBLE PRECISION, 
	male_smokers DOUBLE PRECISION, handwashing_facilities DOUBLE PRECISION, 
	hospital_beds_per_thousand DOUBLE PRECISION, life_expectancy DOUBLE PRECISION, 
	human_development_index  DOUBLE PRECISION, excess_mortality DOUBLE PRECISION
)

COPY covidvaccinations FROM 'C:\Users\Stanford\Documents\Personal\Coding\Postgresql\Portfolio\covidvaccinations.CSV' DELIMITER ';' CSV HEADER;

-- Section 1: Deaths and Infections

-- 1.1. Total deaths as a % of cases - Global
SELECT continent, location, date, total_cases, total_deaths, 
	(total_deaths / total_cases) * 100 AS perc_deaths_to_cases
FROM coviddeaths
ORDER BY 1, 2, 3;
	
-- 1.2. Total cases as a % of the population - Global
SELECT continent, location, date, population, total_cases,  
	(total_cases / population) * 100 AS perc_cases_to_population
FROM coviddeaths
ORDER BY 1, 2, 3;

-- 1.3. Country infection rate as a % of its population size
SELECT continent, location, date, population, total_cases,  
	(total_cases / population) * 100 AS perc_cases_to_population
FROM coviddeaths
WHERE date = (SELECT MAX(date) FROM coviddeaths)
	AND (total_cases IS NOT NULL AND continent IS NOT NULL)
ORDER BY perc_cases_to_population DESC;

-- 1.4. Country death count as a % of the population size
SELECT continent, location, date, population, total_deaths,  
	(total_deaths / population) * 100 AS perc_deaths_to_population
FROM coviddeaths
WHERE date = (SELECT MAX(date) FROM coviddeaths)
	AND (total_deaths IS NOT NULL AND continent IS NOT NULL)
ORDER BY perc_deaths_to_population DESC;

-- 1.5 Ranked country death count - Global ranking
SELECT continent, location, MAX(total_deaths) total_death_count_location,
	RANK() OVER(ORDER BY MAX(total_deaths) DESC)
FROM coviddeaths
WHERE continent IS NOT NULL AND total_deaths IS NOT NULL
GROUP BY continent, location

-- 1.6 Ranked country death count - Continental ranking
SELECT continent, location, MAX(total_deaths) total_death_count_location,
	RANK() OVER(PARTITION BY continent ORDER BY MAX(total_deaths) DESC)
FROM coviddeaths
WHERE continent IS NOT NULL AND total_deaths IS NOT NULL
GROUP BY continent, location

-- 1.7 Continental death count (Ranked by region)
SELECT continent, SUM(total_death_count_location) total_death_count,
	RANK() OVER(ORDER BY SUM(total_death_count_location) DESC)
FROM (
	SELECT continent, location, MAX(total_deaths) total_death_count_location
	FROM coviddeaths
	WHERE continent IS NOT NULL AND total_deaths IS NOT NULL
	GROUP BY continent, location
	) a
GROUP BY continent;

-- 1.8 Global new deaths to new cases as a %
SELECT date, SUM(new_cases) total_new_cases, 
	SUM(new_deaths) total_new_deaths, 
	SUM(new_deaths)/SUM(new_cases) * 100 perc_new_death_to_new_cases
FROM coviddeaths
WHERE continent IS NOT NULL --AND total_deaths IS NOT NULL
GROUP BY date
ORDER BY date

-- 1.9 Africa new deaths to new cases as a %
SELECT continent, date, SUM(new_cases) total_new_cases, 
	SUM(new_deaths) total_new_deaths, 
	SUM(new_deaths)/SUM(new_cases) * 100 perc_new_death_to_new_cases
FROM coviddeaths
WHERE continent = 'Africa'
GROUP BY continent, date
ORDER BY date




-- Total vaccinations VS total population per country (CTE use)

WITH popvsvac (continent, location, date, population, new_vaccinations,
			  continent_rolling_count, country_rolling_count, global_rolling_count)
AS
(
SELECT cd.continent, cd.location, cd.date, cd.population, cv.new_vaccinations,
SUM(new_vaccinations) OVER(PARTITION BY cd.continent ORDER BY cd.continent, cd.date 
						   RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) continent_rolling_count,
SUM(cv.new_vaccinations) OVER(PARTITION BY cd.location ORDER BY cd.location, cd.date 
						   RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) country_rolling_count,
SUM(new_vaccinations) OVER(ORDER BY cd.date 
						   RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) global_rolling_count						   
FROM covidvaccinations cv
JOIN coviddeaths cd
ON cv.location = cd.location AND cv.date = cd.date
WHERE cd.continent IS NOT NULL
)
SELECT *,  country_rolling_count / population * 100 as perc_people_vaccinated_per_country
FROM popvsvac
ORDER BY location, date;



